import { Nullable, Snowflake } from './';
import { ChannelType } from './Channel';
import { Embed } from './Embed';
import { PartialEmoji } from './Emoji';
import { Member } from './Member';
import { User } from './User';

/**
 * The allowed mention field allows for more granular control over mentions without various hacks to the message content.
 * This will always validate against message content to avoid phantom pings (e.g. to ping everyone, you must still have
 * `@everyone` in the message content), and check against user/bot permissions
 *
 * @source {@link https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mentions-structure Channel}
 */
export interface AllowedMentions {
	/**
	 * An array of {@link https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mention-types allowed mention} types to parse from the content
	 */
	parse: AllowedMentionsType[];

	/**
	 * Array of `role_id`s to mention (Max size of 100)
	 */
	roles: Snowflake[];

	/**
	 * Array of `user_id`s to mention (Max size of 100)
	 */
	users: Snowflake[];

	/**
	 * For replies, whether to mention the author of the message being replied to (default false)
	 */
	replied_user: boolean;
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#attachment-object-attachment-structure Channel}
 */
export interface Attachment {
	/**
	 * Attachment ID
	 */
	id: Snowflake;

	/**
	 * Name of file attached
	 */
	filename: string;

	/**
	 * Size of file in bytes
	 */
	size: number;

	/**
	 * Source URL of file
	 */
	url: string;

	/**
	 * A proxied URL of fiel
	 */
	proxy_url: string;

	/**
	 * Height of file (if image)
	 */
	height?: Nullable<number>;

	/**
	 * Width of file (if image)
	 */
	width?: Nullable<number>;
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-structure Channel}
 */
export interface CrosspostedMessage extends Message {
	/**
	 * Channels specifically mentioned in this message
	 */
	mention_channels?: MentionedChannel[];

	/**
	 * Data showing the source of a crosspost, channel follow add, pin, or reply message
	 */
	message_reference: MessageReference;
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#channel-mention-object-channel-mention-structure Channel}
 */
export interface MentionedChannel {
	/**
	 * ID of the channel
	 */
	id: Snowflake;

	/**
	 * ID of the guild containing the channel
	 */
	guild_id: Snowflake;

	/**
	 * The {@link https://discord.com/developers/docs/resources/channel#channel-object-channel-types type of channel}
	 */
	type: ChannelType;

	/**
	 * The name of the channel
	 */
	name: string;
}

export interface MentionedUser extends User {
	member?: Partial<Omit<Member, 'user'>>;
}

/**
 * Represents a message sent in a channel within Discord
 *
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-structure Channel}
 */
export interface Message {
	/**
	 * ID of the message
	 */
	id: Snowflake;

	/**
	 * ID of the channel the message was sent in
	 */
	channel_id: Snowflake;

	/**
	 * ID of the guild the message was sent in
	 */
	guild_id?: Snowflake;

	/**
	 * The author of this message (not guaranteed to be a valid user)
	 */
	author: User;

	/**
	 * Member properties for this message's author
	 */
	member?: Member;

	/**
	 * Contents of the message
	 */
	content: string;

	/**
	 * When this message was sent
	 */
	timestamp: string;

	/**
	 * When this message was edited (or null if never)
	 */
	edited_timestamp?: Nullable<string>;

	/**
	 * Whether this was a TTS message
	 */
	tts: boolean;

	/**
	 * Whether this message mentions everyone
	 */
	mention_everyone: boolean;

	/**
	 * Users specifically mentioned in the message
	 */
	mentions: MentionedUser[];

	/**
	 * Roles specifically mentioned in this message
	 */
	mention_roles: Snowflake[];

	/**
	 * Any attached files
	 */
	attachments: Attachment[];

	/**
	 * Any embedded content
	 */
	embeds: Embed;

	/**
	 * Reactions to the message
	 */
	reactions?: Reaction[];

	/**
	 * Used for validating a message was sent
	 */
	nonce?: number | string;

	/**
	 * Whether this message is pinned
	 */
	pinned: boolean;

	/**
	 * If the message is generated by a webhook, this is the webhook's ID
	 */
	webhook_id?: Snowflake;

	/**
	 * {@link https://discord.com/developers/docs/resources/channel#message-object-message-types Type of message}
	 */
	type: MessageType;

	/**
	 * Sent with Rich Presence-related chat embeds
	 */
	activity?: MessageActivity;

	/**
	 * Sent with Rich Presence-related chat embeds
	 */
	application?: MessageApplication;

	/**
	 * {@link https://discord.com/developers/docs/resources/channel#message-object-message-flags Message flags} combined as a {@link https://en.wikipedia.org/wiki/Bit_field bitfield}
	 */
	flags?: MessageFlags;

	/**
	 * The stickers sent with the message (bots currently can only receive messages with stickers, not send)
	 */
	stickers?: Sticker[];

	/**
	 * The message associated with the message_reference
	 */
	referenced_message?: Nullable<Message>;
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-activity-structure Channel}
 */
export interface MessageActivity {
	/**
	 * {@link https://discord.com/developers/docs/resources/channel#message-object-message-activity-types Type of message activity}
	 */
	type: MessageActivityType;

	/**
	 * `party_id` from a {@link https://discord.com/developers/docs/rich-presence/how-to#updating-presence-update-presence-payload-fields Rich Presence event}
	 */
	party_id?: string;
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-application-structure Channel}
 */
export interface MessageApplication {
	/**
	 * ID of the application
	 */
	id: Snowflake;

	/**
	 * ID of the embed's image asset
	 */
	cover_image?: string;

	/**
	 * Application's description
	 */
	description: string;

	/**
	 * ID of the application's icon
	 */
	icon: Nullable<string>;

	/**
	 * Name of the application
	 */
	name: string;
}

/**
 * There are four situations in which a message has a `message_reference` object:
 *
 * - **Crosspost Messages** – messages that originated from another channel (`IS_CROSSPOST` flag)
 *
 * These messages have all three fields, with data of the original message that was crossposted
 *
 * - **Channel Follow Add Messages** – automatic messages sent when a channel is followed into the current channel (Type 12)
 *
 * These messages have the `channel_id` and `guild_id` fields, with data of the followed announcement channel
 *
 * - **Pin Messages** – automatic messages sent when a message is pinned (Type 6)
 *
 * These messages have `message_id` and `channel_id`, and `guild_id` if it is in a guild, with data of the message that was pinned
 *
 * - **Replies** – messages replying to a previous message (Type 19)
 *
 * These messages have `message_id` and `channel_id`, and `guild_id` if it is in a guild, with data of the message that was replied to. The `channel_id` and
 * `guild_id` will be the same as the reply. Replies are created by including a message_reference when sending a message. When sending, only `message_id` is required
 *
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-reference-structure Channel}
 */
export interface MessageReference {
	/**
	 * ID of the originating message
	 */
	message_id?: Snowflake;

	/**
	 * ID of the originating message's channel
	 */
	channel_id?: Snowflake;

	/**
	 * ID of the originating message's guild
	 */
	guild_id?: Snowflake;

	/**
	 * When sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true
	 */
	fail_if_not_exists?: boolean;
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#reaction-object-reaction-structure Channel}
 */
export interface Reaction {
	/**
	 * Times this emoji has been used to react
	 */
	count: number;

	/**
	 * Whether the current user reacted using this emoji
	 */
	me: boolean;

	/**
	 * Emoji information
	 */
	emoji: PartialEmoji;
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-sticker-structure Channel}
 */
export interface Sticker {
	/**
	 * ID of the sticker
	 */
	id: Snowflake;

	/**
	 * ID of the pack the sticker is from
	 */
	pack_id: Snowflake;

	/**
	 * Name of the sticker
	 */
	name: string;

	/**
	 * Description of the sticker
	 */
	description: string;

	/**
	 * A comma-separated list of tags for the sticker
	 */
	tags?: string;

	/**
	 * Sticker asset hash
	 */
	asset: string;

	/**
	 * Sticker preview asset hash
	 */
	preview_asset: string;

	/**
	 * {@link https://discord.com/developers/docs/resources/channel#message-object-message-sticker-format-types Type of sticker format}
	 */
	format_type: StickerFormat;
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-activity-types Channel}
 */
export enum MessageActivityType {
	Join = 1,
	Spectate,
	Listen,
	JoinRequest = 5
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-flags Channel}
 */
export enum MessageFlags {
	/**
	 * This message has been published to subscribed channels (via Channel Following)
	 */
	Crossposted = 1 << 0,

	/**
	 * This message originated from a message in another channel (via Channel Following)
	 */
	IsCrosspost = 1 << 1,

	/**
	 * Do not include any embeds when serializing this message
	 */
	SuppressEmbeds = 1 << 2,

	/**
	 * The source message for this crosspost has been deleted (via Channel Following)
	 */
	SourceDeleted = 1 << 3,

	/**
	 * This message came from the urgent message system
	 */
	Urgent = 1 << 4,
	Ephemeral = 1 << 6
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-types Channel}
 */
export enum MessageType {
	Default,
	RecipientAdd,
	RecipientRemove,
	Call,
	ChannelNameChange,
	ChannelIconChange,
	ChannelPinnedMessage,
	GuildMemberJoin,
	UserPremiumGuildSubscription,
	UserPremiumGuildSubscriptionTier1,
	UserPremiumGuildSubscriptionTier2,
	UserPremiumGuildSubscriptionTier3,
	ChannelFollowAdd,
	GuildDiscoveryDisqualified = 14,
	GuildDiscoveryRequalified,
	GuildDiscoveryGracePeriodInitialWarning,
	GuildDiscoveryGracePeriodFinalWarning,
	Reply = 19,
	ApplicationCommand
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#message-object-message-sticker-format-types Channel}
 */
export enum StickerFormat {
	PNG,
	APNG,
	LOTTIE
}

/**
 * @source {@link https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mention-types Channel}
 */
export type AllowedMentionsType = 'roles' | 'users' | 'everyone';

// SECTION Endpoints

/**
 * Returns the messages for a channel
 *
 * @endpoint [GET](https://discord.com/developers/docs/resources/channel#get-channel-messages) `/channels/{channel.id}/messages`
 *
 * @returns An array of {@link https://discord.com/developers/docs/resources/channel#message-object message} objects on success, sorted by their ID in descending order
 */
export interface GetMessages {
	/**
	 * Get messages around this message ID
	 */
	around?: Snowflake;

	/**
	 * Get messages before this message ID
	 */
	before?: Snowflake;

	/**
	 * Get messages after this message ID
	 */
	after?: Snowflake;

	/**
	 * Max number of messages to return (1-100)
	 */
	limit?: number;
}

/**
 * Post a message to a guild text or DM channel
 *
 * @endpoint [POST](https://discord.com/developers/docs/resources/channel#create-message) `/channels/{channel.id}/messages`
 *
 * @returns A {@link https://discord.com/developers/docs/resources/channel#message-object message} object
 * @fires A {@link https://discord.com/developers/docs/topics/gateway#message-create Message Create} Gateway event
 */
export interface CreateMessage {
	/**
	 * The message contents (up to 2000 characters)
	 */
	content?: string;

	/**
	 * A nonce that can be used for optimistic message sending (up to 25 characters)
	 */
	nonce?: number | string;

	/**
	 * True if this is a TTS message
	 */
	tts?: boolean;

	/**
	 * The contents of the file being sent
	 */
	file?: unknown;

	/**
	 * Embedded rich content
	 */
	embed?: Embed;

	/**
	 * JSON encoded body of any additional request fields
	 */
	payload_json?: string;

	/**
	 * Allowed mentions for a message
	 */
	allowed_mentions?: AllowedMentions;

	/**
	 * Include to make your message a reply
	 */
	message_reference?: MessageReference;
}

/**
 * Get a list of users that reacted with this emoji
 *
 * @endpoint [GET](https://discord.com/developers/docs/resources/channel#get-reactions) `/channels/{channel.id}/messages/{message.id}/reactions/{emoji.id}
 *
 * @returns An array of {@link https://discord.com/developers/docs/resources/user#user-object user} objects on success, sorted by their id in ascending order
 */
export interface GetReactions {
	/**
	 * Get users after this user ID
	 */
	after?: Snowflake;

	/**
	 * Max number of users to return (1-100)
	 */
	limit?: number;
}

/**
 * Edit a previously sent message
 *
 * @endpoint [PATCH](https://discord.com/developers/docs/resources/channel#edit-message) `/channels/{channel.id}/messages/{message.id}`
 *
 * @returns A {@link https://discord.com/developers/docs/resources/channel#message-object message} object
 * @fires A {@link https://discord.com/developers/docs/topics/gateway#message-update Message Update} gateway event
 */
export interface EditMessage {
	/**
	 * The new message contents (up to 2000 characters)
	 */
	content?: Nullable<string>;

	/**
	 * Embedded rich content
	 */
	embed?: Nullable<Embed>;

	/**
	 * Edit the {@link https://discord.com/developers/docs/resources/channel#message-object-message-flags flags} of a message (only `SUPPRESS_EMBEDS` can currently be set/unset)
	 */
	flags?: Nullable<number>;

	/**
	 * Allowed mentions for the message
	 */
	allowed_mentions?: Nullable<AllowedMentions>;
}

/**
 * Delete multiple messages in a single request
 *
 * @endpoint [POST](https://discord.com/developers/docs/resources/channel#bulk-delete-messages) `/channels/{channel.id}/messages/bulk-delete`
 *
 * @returns A 204 empty response on success
 * @fires A {@link https://discord.com/developers/docs/topics/gateway#message-delete-bulk Message Delete Bulk} Gateway event
 */
export interface BulkDeleteMessages {
	/**
	 * An array of message IDs to delete (2-100)
	 */
	messages: Snowflake[];
}

// !SECTION
